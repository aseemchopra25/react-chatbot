{"version":3,"sources":["components/LearningOptions/LearningOptions.js","components/LinkList/LinkList.js","chatbot/config.js","chatbot/ActionProvider.js","chatbot/MessageParser.js","App.js","index.js"],"names":["LearningOptions","props","optionsMarkup","text","handler","actionProvider","handleCBSEList","id","handleFashionList","map","option","className","onClick","LinkList","linkMarkup","options","link","href","url","target","rel","config","botName","initialMessages","createChatBotMessage","widget","customStyles","botMessageBox","backgroundColor","chatButton","widgets","widgetName","widgetFunc","ActionProvider","setStateFunc","createClientMessage","message","updateChatBotState","this","setState","greetingMessage","prevState","messages","MessageParser","state","lowerCaseMessage","toLowerCase","includes","greet","App","messageParser","ReactDOM","render","document","getElementById"],"mappings":"6RAiCeA,EA7BS,SAACC,GACrB,IAeMC,EAfU,CACZ,CACIC,KAAM,OACNC,QAAQH,EAAMI,eAAeC,eAC7BC,GAAG,GAIP,CACIJ,KAAM,iBACNC,QAAQH,EAAMI,eAAeG,kBAC7BD,GAAG,IAImBE,KAAI,SAACC,GAAD,OAC9B,wBACIC,UAAU,yBAEVC,QAASF,EAAON,QAHpB,SAKKM,EAAOP,MAHHO,EAAOH,OAMhB,OAAO,qBAAKI,UAAU,6BAAf,SAA6CT,KCV7CW,G,MAhBE,SAACZ,GACd,IAAMa,EAAab,EAAMc,QAAQN,KAAI,SAACO,GAAD,OACjC,oBAAkBL,UAAU,iBAA5B,SACI,mBACIM,KAAMD,EAAKE,IACXC,OAAO,SACPC,IAAM,sBACNT,UAAW,qBAJf,SAMKK,EAAKb,QAPLa,EAAKT,OAWlB,OAAO,oBAAII,UAAU,YAAd,SAA2BG,MC4CvBO,EApDA,CACXC,QAAS,cACTC,gBAAiB,CACbC,+BAAqB,+CACrB,CACIC,OAAQ,qBAGhBC,aAAa,CACTC,cAAe,CACXC,gBAAiB,WAErBC,WAAY,CACRD,gBAAiB,YAGzBE,QAAS,CACL,CACIC,WAAY,kBACZC,WAAY,SAAC/B,GAAD,OAAW,cAAC,EAAD,eAAqBA,MAEhD,CACI8B,WAAY,YACZC,WAAY,SAAC/B,GAAD,OAAW,cAAC,EAAD,eAAcA,KACrCA,MAAO,CACHc,QAAS,CACL,CACIZ,KAAM,+BACNe,IAAK,uDACLX,GAAI,MAMpB,CACIwB,WAAY,eACZC,WAAY,SAAC/B,GAAD,OAAW,cAAC,EAAD,eAAcA,KACrCA,MAAO,CACHc,QAAS,CACL,CACIZ,KAAM,YACNe,IAAK,+CACLX,GAAI,Q,qBCTb0B,E,WAtCX,WAAaT,EAAsBU,EAAcC,GAAsB,IAAD,gCAMtE7B,eAAiB,WACb,IAAM8B,EAAU,EAAKZ,qBACjB,+DACA,CACIC,OAAQ,cAGhB,EAAKY,mBAAmBD,IAb0C,KAetE5B,kBAAoB,WAChB,IAAM4B,EAAU,EAAKZ,qBACjB,yEACA,CACIC,OAAQ,iBAGhB,EAAKY,mBAAmBD,IArBxBE,KAAKd,qBAAuBA,EAC5Bc,KAAKC,SAAWL,EAChBI,KAAKH,oBAAsBA,E,yCAqB/B,WACI,IAAMK,EAAkBF,KAAKd,qBAAqB,sBAClDc,KAAKD,mBAAmBG,K,gCAE5B,SAAmBJ,GAGfE,KAAKC,UAAS,SAAAE,GAAS,kCAChBA,GADgB,IACLC,SAAS,GAAD,mBAAMD,EAAUC,UAAhB,CAA0BN,a,KCJ7CO,E,WAvBX,WAAYtC,EAAgBuC,GAAQ,oBAChCN,KAAKjC,eAAiBA,EACtBiC,KAAKM,MAAQA,E,yCAEjB,SAAMR,GAEF,IAAMS,EAAmBT,EAAQU,eAE9BD,EAAiBE,SAAS,UAAYF,EAAiBE,SAAS,QAG/DT,KAAKjC,eAAe2C,QAErBH,EAAiBE,SAAS,mBACzBT,KAAKjC,eAAeG,oBAErBqC,EAAiBE,SAAS,SACzBT,KAAKjC,eAAeC,qB,KCVjB2C,MAVf,WACE,OACE,qBAAKtC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,IAAD,CAASU,OAAQA,EAAQhB,eAAgB4B,EAAgBiB,cAAeP,SCLhFQ,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.3ab15752.chunk.js","sourcesContent":["import React from 'react'\n\nimport \"./LearningOptions.css\";\n\nconst LearningOptions = (props) => {\n    const options = [\n        {\n            text: \"CBSE\", \n            handler:props.actionProvider.handleCBSEList, \n            id:1,\n        },\n\n\n        {\n            text: \"Fashion Design\", \n            handler:props.actionProvider.handleFashionList, \n            id:2,\n        },\n    ];\n\n    const optionsMarkup = options.map((option)=> (\n        <button \n            className=\"learning-option-button\"\n            key={option.id}\n            onClick={option.handler}\n        >\n            {option.text}\n        </button>\n    ));\n        return <div className=\"learning-options-container\">{optionsMarkup}</div>\n\n};\n\nexport default LearningOptions;","import React from 'react'\nimport './LinkList.css'\n//remember to write css later after finishing up js links\nconst LinkList = (props) => {\n    const linkMarkup = props.options.map((link) =>(\n        <li key={link.id} className=\"link-list-item\">\n            <a \n                href={link.url}\n                target=\"_blank\"\n                rel = \"noopener noreferrer\"\n                className= \"link-list-item-url\"\n            >\n                {link.text}\n            </a>\n        </li>\n    ));\n    return <ul className=\"link-list\">{linkMarkup}</ul>;\n};\n\nexport default LinkList;","// intitialMessages property in this config file is put into \n// the chatbot's internal state in a property called messages\n\nimport React from 'react'\nimport {createChatBotMessage} from 'react-chatbot-kit';\nimport LearningOptions from '../components/LearningOptions/LearningOptions';\nimport LinkList from '../components/LinkList/LinkList';\n\nconst config = {\n    botName: \"LearningBot\",\n    initialMessages: [\n        createChatBotMessage(\"Hi Manya/Nandini. What do you want to learn?\",\n        {\n            widget: \"learningOptions\",\n        })\n    ],\n    customStyles:{\n        botMessageBox: {\n            backgroundColor: \"#376B7E\",\n        },\n        chatButton: {\n            backgroundColor: \"#376B7E\"\n        },\n    },\n    widgets: [\n        {\n            widgetName: \"learningOptions\",\n            widgetFunc: (props) => <LearningOptions {...props} />\n        },\n        {\n            widgetName: \"cbseLinks\",\n            widgetFunc: (props) => <LinkList {...props} />,\n            props: {\n                options: [\n                    {\n                        text: \"New CBSE XIIth Sample Papers\",\n                        url: \"http://cbseacademic.nic.in/SQP_CLASSXII_2021-22.html\",\n                        id: 1,\n                    },\n\n                ],\n            },\n        },\n        {\n            widgetName: \"fashionLinks\",\n            widgetFunc: (props) => <LinkList {...props} />,\n            props: {\n                options: [\n                    {\n                        text: \"Wikipedia\",\n                        url: \"https://en.wikipedia.org/wiki/Fashion_design\",\n                        id: 2,\n                    },\n\n                ],\n            },\n        },\n    ],\n};\n\nexport default config","// this defines methods which are called when the message is parsed and an action or reply\n// is needed\n\nclass ActionProvider {\n    constructor (createChatBotMessage, setStateFunc, createClientMessage) {\n        this.createChatBotMessage = createChatBotMessage;\n        this.setState = setStateFunc;\n        this.createClientMessage = createClientMessage;\n    }\n\n    handleCBSEList = () => {\n        const message = this.createChatBotMessage(\n            \"Fantastic, I've got the following resources for you on CBSE:\",\n            {\n                widget: \"cbseLinks\"\n            }\n        );\n        this.updateChatBotState(message);\n    };\n    handleFashionList = () => {\n        const message = this.createChatBotMessage(\n            \"Fantastic, I've got the following resources for you on Fashion Design:\",\n            {\n                widget: \"fashionLinks\"\n            }\n        );\n        this.updateChatBotState(message);\n    };\n    greet(){\n        const greetingMessage = this.createChatBotMessage(\"Hi, Nandini/Manya!\")\n        this.updateChatBotState(greetingMessage)\n    }\n    updateChatBotState(message){\n        // important to preserve the previous state\n\n        this.setState(prevState => ({\n            ...prevState, messages: [...prevState.messages, message]\n        }))\n\n    }\n}\n\nexport default ActionProvider;","// this calls the parse method\n// this method is constructed with an action provider class that we pass as props\n// to the chatbot, here we control how the message is parsed that is the parse logic \n// and what action to take based on the said parsing\n\n// let's now create a simple chatbot response\n\n\nclass MessageParser {\n    constructor(actionProvider, state) {\n        this.actionProvider = actionProvider;\n        this.state = state\n    }\n    parse(message){\n        // console.log(message)\n        const lowerCaseMessage = message.toLowerCase()\n        \n        if(lowerCaseMessage.includes(\"hello\") || lowerCaseMessage.includes(\"hi\")){\n            // we haven't created greet method yet, so let's create it\n            // in action provider file\n            this.actionProvider.greet()\n        }\n        if(lowerCaseMessage.includes(\"fashion design\")){\n            this.actionProvider.handleFashionList()\n        }\n        if(lowerCaseMessage.includes(\"cbse\")){\n            this.actionProvider.handleCBSEList()\n        }\n\n    }\n}\n\nexport default MessageParser;","import React from 'react'\nimport './App.css';\nimport ChatBot from 'react-chatbot-kit';\nimport config from './chatbot/config';\nimport ActionProvider from './chatbot/ActionProvider'\nimport MessageParser from './chatbot/MessageParser'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ChatBot config={config} actionProvider={ActionProvider} messageParser={MessageParser} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n"],"sourceRoot":""}